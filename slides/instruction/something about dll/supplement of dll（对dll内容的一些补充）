学号：2018302110228
姓名：田昊丽


对动态链接的一些补充： 

*DLL的部署位置
DLL文件必须在特定目录下才能被程序所找到，这些特定的路径包括：
1.可执行文件所在目录
2.进程当前目录
3.系统目录
4.Windows目录
5.环境变量PATH标明的目录

*应用程序使用DLL可以采用两种方式：一种是载入时动态链接，另一种是运行时动态链接。
1.载入时动态链接就是在程序开始执行时就将DLL文件加载到应用程序当中。
实现载入时动态链接时，将导入函数关键字_declspec(dllimport)函数名等写到应用程序相应的头文件中就可以了。

//Dlltest.h  
#pragma comment(lib，"MyDll.lib")  
extern "C"_declspec(dllimport) int Max(int a,int b);  
extern "C"_declspec(dllimport) int Min(int a,int b);  
//TestDll.cpp  
#include  
#include"Dlltest.h"  
void main()  
{
int a;  
a=min(8,10)  
printf("比较的结果为%d "，a);  
}  

2．运行时动态链接
运行时动态链接是应用程序在执行过程中随时可以加载DLL文件，也可以随时卸载DLL文件，
这是载入时动态链接所无法做到的，所以运行时动态链接具有更好的灵活性，对于解释性语言更为合适。
不过实现运行时动态链接要麻烦一些。在应用程序中用LoadLibrary或MFC提供的AfxLoadLibrary将自己所做的动态链接库调进来，
动态链接库的文件名即是上述两个函数的参数，此后再用GetProcAddress()获取想要引入的函数。
在应用程序退出之前，应该用FreeLibrary或MFC提供的AfxFreeLibrary释放动态链接库。

void main(void)  
{  
typedef int(*pMax)(int a,int b);  
typedef int(*pMin)(int a,int b);  
HINSTANCE hDLL;  
PMax Max  
HDLL=LoadLibrary("MyDll.dll");//加载动态链接库MyDll.dll文件；  
Max=(pMax)GetProcAddress(hDLL,"Max");  
A=Max(5,8);  
Printf("比较的结果为%d "，a);  
FreeLibrary(hDLL);//卸载MyDll.dll文件；  
}  

对静态链接和动态链接的一点归纳：

在C语言中，要生成可执行文件，必须经历两个阶段，即编译、链接。在编译过程中，只有编译，不会涉及到链接。
在链接过程中，静态链接和动态链接就出现了区别。
静态链接的过程就已经把要链接的内容已经链接到了生成的可执行文件中，就算现在去把静态库删除也不会影响可执行程序的执行；
而动态链接这个过程却没有把内容链接进去，而是在执行的过程中，再去找要链接的内容，生成的可执行文件中并没有要链接的内容，
所以删除动态库时，可执行程序就不能运行。

*静态链接和动态链接的区别（按点描述）：
1.时期：（最大区别）
静态库在编译时连接，在链接时拷贝
动态库在运行时连接
2.资源
静态库在每次使用时会全部连接进可执行程序，浪费资源。
动态库在使用时访问动态库中函数，节省资源。
3.更新升级
静态库更新，则每个使用该静态库的程序都需要更新，不易于更新升级
动态库仅更新自身，易于更新升级
4.包含其他库
静态链接库不能再包含其他动态链接库
动态链接库可以包含其他动态链接库